import java.util.*;import javax.swing.*;import javax.swing.table.*;import java.awt.*;import java.awt.event.*;import java.io.*;import java.sql.*;public class Fenetre extends JFrame implements ActionListener{	private static final long serialVersionUID = 1L;			//variables  	Connexion co;	Connection connection;	boolean autocommit = false;			////Composants 		//composants NORTH	JComboBox<String> box=new JComboBox<String>();		//composants CENTER	JScrollPane scroll = new JScrollPane();	JTable table=new JTable();		//composants WEST	JPanel boutons=new JPanel();	GridLayout grid=new GridLayout(0,1,10,10);		JButton Reset=new JButton("Reinitialiser Affichage");	JButton Saisie=new JButton("Saisie");	JButton Deco=new JButton("Deconnexion");	JButton Rollback=new JButton("Rollback");	JButton Commit=new JButton("Commit");	JToggleButton AutoCommit=new JToggleButton("AutoCommit");		//composants SOUTH	JPanel req=new JPanel();	JButton ResetQuery=new JButton("Reinitialiser Requete");	JButton Apply=new JButton("Appliquer");	GridLayout gridR=new GridLayout(0,4,10,10);		//composants EAST	JPanel HistoriquePanel=new JPanel();	GridLayout gridH=new GridLayout(2,1);	JTextArea HistoriqueText=new JTextArea(50,25);	JButton HistoriqueReset=new JButton("Effacer Historique");		//composants SAISIE	JLabel saisie=new JLabel("Saisissez votre requête");	JTextArea saisieTextArea=new JTextArea(1,40);			public Fenetre(Connexion co,Connection connection) {		super("Database Monitor");		this.co=co;		this.connection=connection;				try{getListTables();this.connection.setAutoCommit(autocommit);}		catch(SQLException e) {e.printStackTrace();}				if(box.getItemCount()>0) {			try {getTable(box.getItemAt(0));}catch(SQLException e) {e.printStackTrace();}		}				box.addItemListener(new ItemListener() {			@Override			public void itemStateChanged(ItemEvent ev) {            	String item=box.getSelectedItem().toString();            	try {            		table.removeAll();                	getTable(item);                } catch(SQLException e) {e.printStackTrace();}			}		});		boutons.setLayout(null);		boutons.setPreferredSize(new Dimension(220,100));		box.setBounds(10, 20, 200, 20);boutons.add(box);		Saisie.setBounds(10, 60, 200, 20);boutons.add(Saisie);		Reset.setBounds(10, 100, 200, 20);boutons.add(Reset);		Rollback.setBounds(10, 140, 200, 20);boutons.add(Rollback);		AutoCommit.setBounds(10, 180, 200, 20);boutons.add(AutoCommit);		Commit.setBounds(10, 220, 200, 20);boutons.add(Commit);		Deco.setBounds(10, 260, 200, 20);boutons.add(Deco);				HistoriquePanel.setLayout(null);		HistoriquePanel.setPreferredSize(new Dimension(220,800));		HistoriqueText.setBounds(10, 10, 200, 720);		HistoriquePanel.add(HistoriqueText);		HistoriqueReset.setBounds(10, 740, 200, 20);		HistoriquePanel.add(HistoriqueReset);				HistoriqueReset.addActionListener(this);						Deco.addActionListener(this);		Apply.addActionListener(this);		Saisie.addActionListener(this);		Reset.addActionListener(this);		Rollback.addActionListener(this);		Commit.addActionListener(this);				AutoCommit.addItemListener(new ItemListener() {			public void itemStateChanged(ItemEvent ev) {				if(ev.getStateChange()==ItemEvent.SELECTED){					try {						connection.setAutoCommit(true);						HistoriqueText.append("\nAutoCommit = true");					}catch(SQLException e) {e.printStackTrace();}			    }else if(ev.getStateChange()==ItemEvent.DESELECTED){					try {						connection.setAutoCommit(false);						HistoriqueText.append("\nAutoCommit = false");					}catch(SQLException e) {e.printStackTrace();}			    }			}		});				ResetQuery.addActionListener(this);						this.getContentPane().add(scroll,BorderLayout.CENTER);		this.getContentPane().add(boutons,BorderLayout.WEST);			this.getContentPane().add(req,BorderLayout.SOUTH);		this.getContentPane().add(HistoriquePanel,BorderLayout.EAST);						validate();		setSize(1600,900);		setLocationRelativeTo(null);		setVisible(true);	}				public void actionPerformed(ActionEvent e) {		Object source = e.getSource();		if(source==Saisie){Saisie();}		else if(source==Reset){			saisieTextArea.setText("");			req.removeAll();			try{getTable(box.getSelectedItem().toString());}			catch(SQLException ex){ex.printStackTrace();}			revalidate();			repaint();			try{getTable(box.getSelectedItem().toString());}			catch(SQLException er) {er.printStackTrace();}		}else if(source==ResetQuery){			Saisie();			saisieTextArea.setText("");		}else if(source==Apply){			try{Request(saisieTextArea.getText());}			catch(SQLException ev) {ev.printStackTrace();}		}else if(source==Deco){			try{this.connection.close();}			catch(SQLException ex){ex.printStackTrace();}			System.out.println("decconnecté");deco();		}else if(source==Rollback){			try{				if(this.connection.getAutoCommit()==false) {					this.connection.rollback();				}				HistoriqueText.append("Rollback\n");			}catch(SQLException ex){ex.printStackTrace();}		}else if(source==Commit){			try{				this.connection.commit();				HistoriqueText.append("Commit\n");			}			catch(SQLException ex){ex.printStackTrace();}		}else if(source==HistoriqueReset){			HistoriqueText.setText("");		}	}			public void Saisie() {		req.removeAll();		req.setLayout(gridR);		req.add(saisie);		req.add(saisieTextArea);		req.add(Apply);		req.add(ResetQuery);		revalidate();		repaint();			}		public void getListTables() throws SQLException {		ArrayList<String> listTables=new ArrayList<String>();		try {			DatabaseMetaData m = this.connection.getMetaData();			ResultSet resQTables = m.getTables(Login.database, null, null, new String[] {"TABLE"});			while(resQTables.next()) {				listTables.add(resQTables.getString("TABLE_NAME"));			}			resQTables.close();		}catch(SQLException e) {throw e;}		for (int i=0;i<listTables.size();i++) {			if(!(IsInBox(listTables.get(i)))) {				box.addItem(listTables.get(i));			}		}		for (int i=0;i<box.getItemCount();i++) {			if(!(IsInList(listTables,box.getItemAt(i)))) {				box.removeItemAt(i);			}		}		revalidate();		repaint();	}		public void getTable(String table) throws SQLException {    	Statement statement=this.connection.createStatement();		try {			ResultSet res=statement.executeQuery("SELECT * FROM "+table);		    scroll.getViewport().add(createTable(data(res),colonnes(res)));		    res.close();		    statement.close();		}catch(SQLException e) {e.printStackTrace();System.out.println("erreur");}    	statement.close();	}		public void Request(String s)throws SQLException{		int nbPI=0;		Statement statement=this.connection.createStatement();		ResultSet res=null;		PreparedStatement stmt=this.connection.prepareStatement(s);		for(int i=0;i<s.length();i++) {			if (s.charAt(i)=='?') {				nbPI++;			}		}		if(nbPI==0) {			Saisie();			String[] req=s.split(" ",2);			if(req[0].equals("SELECT")||req[0].equals("select")) {				try{					res=statement.executeQuery(s);					scroll.getViewport().add(createTable(data(res),colonnes(res)));					statement.close();					res.close();					revalidate();					repaint();					HistoriqueText.append("SELECT REQUEST\n");				}catch(SQLException e) {e.printStackTrace();}			}else if(req[0].equals("CREATE")||req[0].equals("DROP")||req[0].equals("create")||req[0].equals("drop")){				try{					stmt.execute(s);					getListTables();					statement.close();					revalidate();					repaint();					if(req[0].equals("CREATE")||req[0].equals("create")) {						HistoriqueText.append("CREATE REQUEST\n");					}else {HistoriqueText.append("DROP REQUEST\n");}				}catch(SQLException e) {e.printStackTrace();}			}else if(req[0].equals("INSERT")||req[0].equals("DELETE")||req[0].equals("create")||req[0].equals("delete")||req[0].equals("ALTER")||req[0].equals("alter")) {				try{											//INSERT INTO fruit (nom,quantite,origine) 					//VALUES ('ananas',100,'france')					stmt.executeUpdate();					getTable(box.getSelectedItem().toString());					stmt.close();					revalidate();					repaint();					if(req[0].equals("INSERT")||req[0].equals("insert")) {						HistoriqueText.append("INSERT REQUEST\n");					}else if(req[0].equals("ALTER")||req[0].equals("alter")){						HistoriqueText.append("ALTER REQUEST\n");					}else if(req[0].equals("DELETE")||req[0].equals("delete")) {}						HistoriqueText.append("DELETE REQUEST\n");					}catch(SQLException e) {e.printStackTrace();}			}		}else if (nbPI>0) {			if(req.getComponentCount()==4){				for(int i=0;i<nbPI;i++) {					JTextArea p=new JTextArea(1,50);					p.setName(Integer.toString(i+5));					req.add(p);				}				revalidate();				repaint();			}else if(req.getComponentCount()>4 && req.getComponentCount()-4!=nbPI) {				if(req.getComponentCount()-4>nbPI) {					for(int i=req.getComponentCount()-4;i>nbPI;i--) {						req.remove(req.getComponent(i+3));					}				}else if(req.getComponentCount()-4<nbPI) {					for(int i=1;i<nbPI;i++) {						JTextArea p=new JTextArea(1,50);						p.setName(Integer.toString(i+req.getComponentCount()-4));						req.add(p);					}				}				revalidate();				repaint();			}else if(req.getComponentCount()>4 && req.getComponentCount()-4==nbPI) {				for(int i=0;i<nbPI;i++) {					JTextArea t=(JTextArea)req.getComponent(i+4);					if(isNumeric(t.getText())) {						stmt.setInt(i+1,Integer.parseInt(t.getText()));					}else if(t.getText().equals("true")) {						stmt.setBoolean(i+1,true);					}else if(t.getText().equals("false")) {						stmt.setBoolean(i+1,false);					}else{						stmt.setString(i+1,t.getText());					}				}				try{					stmt.executeQuery();					res=stmt.getResultSet();					scroll.getViewport().add(createTable(data(res),colonnes(res)));									revalidate();					repaint();					HistoriqueText.append(s+"\n");				}catch(SQLException e){e.printStackTrace();}			}		}	}			public JTable createTable(Vector<Vector<Object>> data,Vector<String> col) {	    DefaultTableModel model=new DefaultTableModel(data,col);		return new JTable(model);	} 		public Vector<String> colonnes(ResultSet r) throws SQLException{		Vector<String> col=new Vector<String>();		int c=r.getMetaData().getColumnCount();		for(int i=1;i<=c;i++) {			col.add(r.getMetaData().getColumnName(i));		}		return col;	}		public Vector<Vector<Object>> data(ResultSet r) throws SQLException{		Vector<Vector<Object>> data = new Vector<Vector<Object>>();		int c=r.getMetaData().getColumnCount();	    while (r.next()) {	        Vector<Object> vector = new Vector<Object>();	        for (int i=1;i<=c;i++) {	            vector.add(r.getObject(i));	        }	        data.add(vector);	    }		return data;	}		public void deco() {		Fenetre.this.dispose();		Login l=new Login();	}		public Boolean IsInBox(String s) {		Boolean IsIn=false;		for(int i=0;i<box.getItemCount();i++) {			if(box.getItemAt(i).equals(s)) {				IsIn=true;			}		}		return IsIn;	}		public Boolean IsInList(ArrayList<String> l,String s) {		Boolean IsIn=false;		for(int i=0;i<l.size();i++) {			if(l.get(i).equals(s)) {				IsIn=true;			}		}		return IsIn;	}		public static boolean isNumeric(String s) {	    if (s==null) {return false;}	    try {int d = Integer.parseInt(s);} 	    catch (NumberFormatException e) {return false;}	    return true;	}}